using System.Collections.Generic;
using Nop.Core;
using Nop.Core.Plugins;
using Nop.Plugin.Widgets.SegmentAnalytics.Helpers;
using Nop.Services.Cms;
using Nop.Services.Configuration;
using Nop.Services.Localization;
using Nop.Web.Framework.Infrastructure;

namespace Nop.Plugin.Widgets.SegmentAnalytics
{
    /// <summary>
    /// Segment plugin
    /// </summary>
    public class SegmentAnalyticsPlugin : BasePlugin, IWidgetPlugin
    {
        #region Fields

        private readonly ILocalizationService _localizationService;
        private readonly IWebHelper _webHelper;
        private readonly ISettingService _settingService;
        private readonly IStoreContext _storeContext;

        #endregion

        #region Ctor

        public SegmentAnalyticsPlugin(
                                        ILocalizationService localizationService,
                                        IWebHelper webHelper,
                                        ISettingService settingService, 
                                        IStoreContext storeContext
                                    )
        {
            _localizationService = localizationService;
            _webHelper = webHelper;
            _settingService = settingService;
            _storeContext = storeContext;
        }
        
        #endregion

        #region Methods

        /// <summary>
        /// Gets widget zones where this widget should be rendered
        /// </summary>
        /// <returns>Widget zones</returns>
        public IList<string> GetWidgetZones()
        {
            return new List<string> { PublicWidgetZones.HeaderAfter, PublicWidgetZones.CheckoutCompletedBottom , PublicWidgetZones.ProductDetailsBottom };
        }

        /// <summary>
        /// Gets a configuration page URL
        /// </summary>
        public override string GetConfigurationPageUrl()
        {
            return _webHelper.GetStoreLocation() + "Admin/WidgetsSegmentAnalytics/Configure";
        }

        /// <summary>
        /// Gets a name of a view component for displaying widget
        /// </summary>
        /// <param name="widgetZone">Name of the widget zone</param>
        /// <returns>View component name</returns>
        public string GetWidgetViewComponentName(string widgetZone)
        {
            if (widgetZone.Equals(PublicWidgetZones.HeaderAfter))
                return ComponentName.WIDGETS_SEGMENT_ANALYTICS;

            if (widgetZone.Equals(PublicWidgetZones.CheckoutCompletedBottom))
                return ComponentName.ORDER_COMPLETED;

            if (widgetZone.Equals(PublicWidgetZones.ProductDetailsBottom))
                return ComponentName.PRODUCT_VIEWED;
            
            return null;
        }
        
        /// <summary>
        /// Install plugin
        /// </summary>
        public override void Install()
        {
            var settings = new SegmentAnalyticsSettings
            {
                SegmentId = "",
                TrackingScript = @"<!-- Segment io -->
                <script type=""text/javascript"">
                !function(){var analytics=window.analytics=window.analytics||[];if(!analytics.initialize)if(analytics.invoked)window.console&&console.error&&console.error(""Segment snippet included twice."");else{analytics.invoked=!0;analytics.methods=[""trackSubmit"",""trackClick"",""trackLink"",""trackForm"",""pageview"",""identify"",""reset"",""group"",""track"",""ready"",""alias"",""debug"",""page"",""once"",""off"",""on""];analytics.factory=function(t){return function(){var e=Array.prototype.slice.call(arguments);e.unshift(t);analytics.push(e);return analytics}};for(var t=0;t<analytics.methods.length;t++){var e=analytics.methods[t];analytics[e]=analytics.factory(e)}analytics.load=function(t,e){var n=document.createElement(""script"");n.type=""text/javascript"";n.async=!0;n.src=""https://cdn.segment.com/analytics.js/v1/""+t+""/analytics.min.js"";var a=document.getElementsByTagName(""script"")[0];a.parentNode.insertBefore(n,a);analytics._loadOptions=e};analytics.SNIPPET_VERSION=""4.1.0"";
                analytics.load(""YOUR_WRITE_KEY"");
                analytics.page();
                }}();
                </script>"
            };
            _settingService.SaveSetting(settings);

            _localizationService.AddOrUpdatePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.SegmentId", "ID");
            _localizationService.AddOrUpdatePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.SegmentId.Hint", "Enter Segment ID.");
            _localizationService.AddOrUpdatePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.TrackingScript", "Tracking code");
            _localizationService.AddOrUpdatePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.TrackingScript.Hint", "Paste the tracking code generated by Segment here. {SEGMENTID} will be dynamically replaced.");
            _localizationService.AddOrUpdatePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.EnableEcommerce", "Enable eCommerce");
            _localizationService.AddOrUpdatePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.EnableEcommerce.Hint", "Check to pass information about orders to SEgment eCommerce feature.");
            _localizationService.AddOrUpdatePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.UseJsToSendEcommerceInfo", "Use JS to send eCommerce info");
            _localizationService.AddOrUpdatePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.UseJsToSendEcommerceInfo.Hint", "Check to use JS code to send eCommerce info from the order completed page. But in case of redirection payment methods some customers may skip it. Otherwise, e-commerce information will be sent using HTTP request. Information is sent each time an order is paid but UTM is not supported in this mode.");
            _localizationService.AddOrUpdatePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.IncludeCustomerId", "Include customer ID");
            _localizationService.AddOrUpdatePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.IncludeCustomerId.Hint", "Check to include customer identifier to script.");
            _localizationService.AddOrUpdatePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.IncludingTax", "Include tax");
            _localizationService.AddOrUpdatePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.IncludingTax.Hint", "Check to include tax when generating tracking code for eCommerce part.");
            _localizationService.AddOrUpdatePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.Instructions", "<p>Clean, collect, and control your customer data with Segment. https://segment.com/ </p>");

            base.Install();
        }

        /// <summary>
        /// Uninstall plugin
        /// </summary>
        public override void Uninstall()
        {
            //settings
            _settingService.DeleteSetting<SegmentAnalyticsSettings>();

            //locales
            _localizationService.DeletePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.SegmentId");
            _localizationService.DeletePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.SegmentId.Hint");
            _localizationService.DeletePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.TrackingScript");
            _localizationService.DeletePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.TrackingScript.Hint");
            _localizationService.DeletePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.EnableEcommerce");
            _localizationService.DeletePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.EnableEcommerce.Hint");
            _localizationService.DeletePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.UseJsToSendEcommerceInfo");
            _localizationService.DeletePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.UseJsToSendEcommerceInfo.Hint");
            _localizationService.DeletePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.IncludeCustomerId");
            _localizationService.DeletePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.IncludeCustomerId.Hint");
            _localizationService.DeletePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.IncludingTax");
            _localizationService.DeletePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.IncludingTax.Hint");
            _localizationService.DeletePluginLocaleResource("Plugins.Widgets.SegmentAnalytics.Instructions");

            base.Uninstall();
        }
        
        #endregion

        #region DELETE
        //TODO DON'T WORK JAVASCRIPT AND .NET TOGETHER
        //private void SegmentInit()
        //{
        //    if (Analytics.Client != null) return;

        //    var storeScope = _storeContext.ActiveStoreScopeConfiguration;

        //    var segmentAnalyticsSettings = _settingService.LoadSetting<SegmentAnalyticsSettings>(storeScope);

        //    if (string.IsNullOrWhiteSpace(segmentAnalyticsSettings.SegmentId))
        //        return;
            
        //    var key = _settingService.GetSettingKey(segmentAnalyticsSettings, x => x.SegmentId);
        //    var value = _settingService.GetSettingByKey<string>(key, null, storeScope, false);

        //    Analytics.Initialize(value);
        //}
        #endregion
    }
}